language: python

sudo: true

addons:
  apt:
    packages:
    - libblas-dev
    - liblapack-dev
    - gfortran

install:
    - pip install -U pip
    - sudo apt-get update
    - if [[ $TRAVIS_PYTHON_VERSION == 2.7 ]]; then
          wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O miniconda.sh;
      else
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      fi
    - bash miniconda.sh -b -p $HOME/miniconda
    - export PATH="$HOME/miniconda/bin:$PATH"
    - hash -r
    - conda config --set always_yes yes --set changeps1 no
    - conda config --add channels pytorch
    - conda update -q conda
    - conda info -a
    - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION numpy mkl mkl-include pytorch-nightly
    - source activate test-environment
    - pip install .[test]
    - pip freeze

branches:
    only:
        - master
        - dev

jobs:
    fast_finish: true
    include:
        - stage: lint
          python: 2.7
          before_install: pip install flake8 nbstripout nbformat
          install:
          script:
              - make lint
              #- make scrub;
              #  git diff-index --quiet HEAD
        - stage: auxiliary modules
          python: 3.5
          env: STAGE=docs
          script:
              - pip install -r docs/requirements.txt
              - make docs
              - make doctest
        - stage: perf
          python: 2.7
          env: STAGE=perf
          script:
              - pip install -e .[profile]
              - pytest -vs --benchmark-disable tests/perf/test_benchmark.py
        - python: 3.5
          if: type = cron
          env: STAGE=perf
          script:
              - pip install -e .[profile]
              - make perf-test
        - stage: profiler
          python: 2.7
          env: STAGE=profiler
          script:
              - pip install -e .[profile]
              - python -m profiler.distributions
        - stage: unit test
          python: 2.7
          env: STAGE=unit
          script: pytest -vs --cov=pyro --cov-config .coveragerc --stage unit --durations 20
        - python: 2.7
          env: STAGE=examples
          script:
              - pytest -vs --cov=pyro --cov-config .coveragerc --stage test_examples
              - grep -l smoke_test tutorial/source/*.ipynb | xargs grep -L 'smoke_test = False' \
                  | CI=1 xargs pytest -vx --nbval-lax --current-env
        - python: 3.5
          env: STAGE=unit
          script: pytest -vs --cov=pyro --cov-config .coveragerc --stage unit --durations 20
        - python: 3.5
          env: STAGE=examples
          script: pytest -vs --cov=pyro --cov-config .coveragerc --stage test_examples
        - stage: integration test
          python: 2.7
          env: STAGE=integration_batch_1
          script: pytest -vs --cov=pyro --cov-config .coveragerc --stage integration_batch_1 --durations 10
        - python: 2.7
          env: STAGE=integration_batch_2
          script: pytest -vs --cov=pyro --cov-config .coveragerc --stage integration_batch_2 --durations 10
        - python: 3.5
          env: STAGE=integration_batch_1
          script: pytest -vs --cov=pyro --cov-config .coveragerc --stage integration_batch_1 --durations 10
        - python: 3.5
          env: STAGE=integration_batch_2
          script: pytest -vs --cov=pyro --cov-config .coveragerc --stage integration_batch_2 --durations 10

after_success:
          - bash <(curl -s https://codecov.io/bash)
